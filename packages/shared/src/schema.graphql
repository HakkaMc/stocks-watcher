type Query {
  findSymbols(
    
    filter: FilterFindManySymbolInput
    skip: Int
    limit: Int = 100
    sort: SortFindManySymbolInput
  ): [Symbol!]!
  getDashboard: Dashboard
  getDailyChangeIndicator(symbol: String): DailyChangeIndicator
  getQuote(symbol: String): GetQuote
  getPrices(symbol: String!, timestampFrom: Float, timestampTo: Float, range: String): GetPrices
  getChartGroups: [ChartGroup]
  getChartGroup(chartGroupId: String!): ChartGroup
  getNote: Note
}

type Symbol {
  description: String!
  displaySymbol: String!
  symbol: String!
  type: String!
  currency: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}


scalar MongoID

scalar Date


input FilterFindManySymbolInput {
  description: String
  displaySymbol: String
  symbol: String
  type: String
  currency: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindManySymbolOperatorsInput
  OR: [FilterFindManySymbolInput!]
  AND: [FilterFindManySymbolInput!]
  search: String
}


input FilterFindManySymbolOperatorsInput {
  description: FilterFindManySymbolDescriptionOperatorsInput
  displaySymbol: FilterFindManySymbolDisplaySymbolOperatorsInput
  symbol: FilterFindManySymbolSymbolOperatorsInput
  _id: FilterFindManySymbol_idOperatorsInput
}

input FilterFindManySymbolDescriptionOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf")

input FilterFindManySymbolDisplaySymbolOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManySymbolSymbolOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManySymbol_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManySymbolInput {
  _ID_ASC
  _ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DISPLAYSYMBOL_ASC
  DISPLAYSYMBOL_DESC
  SYMBOL_ASC
  SYMBOL_DESC
}

type Dashboard {
  user: MongoID
  watchlists: [DashboardWatchlists]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type DashboardWatchlists {
  name: String!
  symbols: [String]!
  _id: MongoID
  symbolsData: [Symbol]
}

type DailyChangeIndicator {
  sum: Float!
  days: [DailyChangeIndicatorDay]
}

type DailyChangeIndicatorDay {
  date: String!
  value: Float!
}

type GetQuote {
  openPrice: Float!
  highPrice: Float!
  lowPrice: Float!
  currentPrice: Float!
  previousClose: Float!
}

type GetPrices {
  priceArray: [PriceTimestampArray]
}

type PriceTimestampArray {
  price: Float!
  timestamp: Float!
}

type ChartGroup {
  user: MongoID
  name: String!
  layout: EnumChartGroupLayout!
  charts: [ChartGroupCharts]!
  _id: MongoID!
}

enum EnumChartGroupLayout {
  vertical
  grid
}

type ChartGroupCharts {
  symbol: String!
  order: Float!
  range: JSON!
  _id: MongoID
  symbolData: Symbol
}


scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Note {
  user: MongoID
  text: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type Mutation {
  saveSymbolToDashboard(symbol: String!, watchlist: String!): String
  changeSymbolWatchlist(symbol: String!, watchlist: String, add: Boolean!): String
  createWatchlist(watchlist: String!): String
  removeSymbolFromDashboard(symbol: String!): String
  createChartGroup(name: String!): ChartGroup
  addChartToChartGroup(chartGroupId: String!, symbol: String!, order: Int!, range: String!): String!
  removeChartFromChartGroup(chartGroupId: String!, symbol: String!): String!
  removeChartGroup(chartGroupId: String!): String!
  saveNote(text: String!): String!
}

type Subscription {
  lastPrice(symbol: String): LastPrice
}

type LastPrice {
  symbol: String!
  price: Float!
  timestamp: Float!
  volume: Float!
}
