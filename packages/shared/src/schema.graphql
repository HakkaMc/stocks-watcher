type ValidationError implements ErrorInterface {
  
  message: String

  
  errors: [ValidatorError!]
}

interface ErrorInterface {
  
  message: String
}

type ValidatorError {
  
  message: String

  
  path: String

  
  value: JSON

  
  idx: Int!
}


scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MongoError implements ErrorInterface {
  
  message: String

  
  code: Int
}

type RuntimeError implements ErrorInterface {
  
  message: String
}

type Query {
  findSymbols(
    
    filter: FilterFindManySymbolInput
    skip: Int
    limit: Int = 100
    sort: SortFindManySymbolInput
  ): [Symbol!]!
  getDashboard: Dashboard
  getDailyChangeIndicator(symbol: String): DailyChangeIndicator
  getQuote(symbol: String): GetQuote
  getPrices(symbol: String!, timestampFrom: Float, timestampTo: Float, range: String): GetPrices
  getChartGroups: [ChartGroup]
  getChartGroup(chartGroupId: String!): ChartGroup
  getNote: Note
  getPriceAlerts(symbol: String!): [PriceAlert]
  getReminders: [Reminder]
  getBinanceAccountInformation: BinanceAccountInformation
  getBinanceOrders: [BinanceOrder!]!
  getBinanceCachedLastPrice(symbol: String!): BinanceLastPrice!
  getOrders(
    
    filter: FilterFindManyOrderInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyOrderInput
  ): [Order!]!
  getBinanceTrades(
    
    filter: FilterFindManyBinanceTradeInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyBinanceTradeInput
  ): [BinanceTrade!]!
  getBinanceSymbols(
    
    filter: FilterFindManyBinanceSymbolInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyBinanceSymbolInput
  ): [BinanceSymbol!]!
  getBinanceProfile(
    
    filter: FilterFindOneBinanceProfileInput
    skip: Int
    sort: SortFindOneBinanceProfileInput
  ): BinanceProfile
}

type Symbol {
  description: String!
  displaySymbol: String!
  symbol: String!
  type: String!
  currency: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}


scalar MongoID

scalar Date


input FilterFindManySymbolInput {
  description: String
  displaySymbol: String
  symbol: String
  type: String
  currency: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindManySymbolOperatorsInput
  OR: [FilterFindManySymbolInput!]
  AND: [FilterFindManySymbolInput!]
  search: String
}


input FilterFindManySymbolOperatorsInput {
  description: FilterFindManySymbolDescriptionOperatorsInput
  displaySymbol: FilterFindManySymbolDisplaySymbolOperatorsInput
  symbol: FilterFindManySymbolSymbolOperatorsInput
  _id: FilterFindManySymbol_idOperatorsInput
}

input FilterFindManySymbolDescriptionOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf")

input FilterFindManySymbolDisplaySymbolOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManySymbolSymbolOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManySymbol_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManySymbolInput {
  _ID_ASC
  _ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DISPLAYSYMBOL_ASC
  DISPLAYSYMBOL_DESC
  SYMBOL_ASC
  SYMBOL_DESC
}

type Dashboard {
  user: MongoID
  watchlists: [DashboardWatchlists]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type DashboardWatchlists {
  name: String!
  symbols: [String]!
  hidden: Boolean!
  _id: MongoID
  symbolsData: [Symbol]
}

type DailyChangeIndicator {
  sum: Float!
  days: [DailyChangeIndicatorDay]
}

type DailyChangeIndicatorDay {
  date: String!
  value: Float!
}

type GetQuote {
  openPrice: Float!
  highPrice: Float!
  lowPrice: Float!
  currentPrice: Float!
  previousClose: Float!
}

type GetPrices {
  priceArray: [PriceTimestampArray]
}

type PriceTimestampArray {
  price: Float!
  timestamp: Float!
}

type ChartGroup {
  user: MongoID
  name: String!
  layout: EnumChartGroupLayout!
  charts: [ChartGroupCharts]!
  _id: MongoID!
}

enum EnumChartGroupLayout {
  vertical
  grid
}

type ChartGroupCharts {
  symbol: String!
  order: Float!
  range: JSON!
  _id: MongoID
  symbolData: Symbol
}

type Note {
  user: MongoID
  text: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type PriceAlert {
  user: MongoID
  symbol: String!
  targetPrice: Float!
  actualPrice: Float!
  notifiedTimestamp: Float!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type Reminder {
  user: MongoID
  title: String!
  text: String
  timestamp: Float!
  active: Boolean!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type BinanceAccountInformation {
  makerCommission: Float!
  takerCommission: Float!
  buyerCommission: Float!
  sellerCommission: Float!
  canTrade: Boolean!
  canWithdraw: Boolean!
  canDeposit: Boolean!
  updateTime: Float!
  accountType: String!
  balances: [BinanceBalance!]!
  permissions: [String!]!
}

type BinanceBalance {
  asset: String!
  free: Float!
  locked: Float!
}

type BinanceOrder {
  symbol: String!
  orderId: Float!
  orderListId: Float!
  clientOrderId: String!
  price: Float!
  origQty: Float!
  executedQty: Float!
  cummulativeQuoteQty: Float!
  status: String!
  timeInForce: String!
  type: String!
  side: String!
  stopPrice: Float!
  icebergQty: Float!
  time: Float!
  updateTime: Float!
  isWorking: Boolean!
  origQuoteOrderQty: Float!
}

type BinanceLastPrice {
  symbol: String!
  ask: Float!
  bid: Float!
  middle: Float!
  diff: Float!
  diffPercentage: Float!
  timestamp: Float!
}

type Order {
  active: Boolean!
  user: MongoID
  type: String!
  symbol: String!
  exchange: String!
  activateOnPrice: Float!
  sellOnPrice: Float!
  priceType: String!
  quantityType: String!
  quantity: Float!
  quoteOrderQty: Float!
  activatedTimestamp: Float!
  percent: Float!
  meta: JSON
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}


input FilterFindManyOrderInput {
  active: Boolean
  user: MongoID
  type: String
  symbol: String
  exchange: String
  activateOnPrice: Float
  sellOnPrice: Float
  priceType: String
  quantityType: String
  quantity: Float
  quoteOrderQty: Float
  activatedTimestamp: Float
  percent: Float
  meta: JSON
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindManyOrderOperatorsInput
  OR: [FilterFindManyOrderInput!]
  AND: [FilterFindManyOrderInput!]
}


input FilterFindManyOrderOperatorsInput {
  _id: FilterFindManyOrder_idOperatorsInput
}

input FilterFindManyOrder_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyOrderInput {
  _ID_ASC
  _ID_DESC
  CREATED_ASC
  CREATED_DESC
}

type BinanceTrade {
  user: MongoID
  baseAsset: String!
  quoteAsset: String!
  symbol: String!
  tradeId: Float!
  orderId: Float!
  orderListId: Float!
  price: Float!
  qty: Float!
  quoteQty: Float!
  commission: Float!
  commissionAsset: String!
  time: Float!
  isBuyer: Boolean!
  isMaker: Boolean!
  isBestMatch: Boolean!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}


input FilterFindManyBinanceTradeInput {
  user: MongoID
  baseAsset: String
  quoteAsset: String
  symbol: String
  tradeId: Float
  orderId: Float
  orderListId: Float
  price: Float
  qty: Float
  quoteQty: Float
  commission: Float
  commissionAsset: String
  time: Float
  isBuyer: Boolean
  isMaker: Boolean
  isBestMatch: Boolean
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindManyBinanceTradeOperatorsInput
  OR: [FilterFindManyBinanceTradeInput!]
  AND: [FilterFindManyBinanceTradeInput!]
}


input FilterFindManyBinanceTradeOperatorsInput {
  _id: FilterFindManyBinanceTrade_idOperatorsInput
}

input FilterFindManyBinanceTrade_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyBinanceTradeInput {
  _ID_ASC
  _ID_DESC
  TIME_ASC
  TIME_DESC
}

type BinanceSymbol {
  symbol: String!
  status: String!
  baseAsset: String!
  baseAssetPrecision: Float!
  quoteAsset: String!
  quotePrecision: Float!
  quoteAssetPrecision: Float!
  orderTypes: [String]!
  icebergAllowed: Boolean!
  ocoAllowed: Boolean!
  isSpotTradingAllowed: Boolean!
  isMarginTradingAllowed: Boolean!
  filters: JSON
  permissions: [String]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}


input FilterFindManyBinanceSymbolInput {
  symbol: String
  status: String
  baseAsset: String
  baseAssetPrecision: Float
  quoteAsset: String
  quotePrecision: Float
  quoteAssetPrecision: Float
  orderTypes: [String]
  icebergAllowed: Boolean
  ocoAllowed: Boolean
  isSpotTradingAllowed: Boolean
  isMarginTradingAllowed: Boolean
  filters: JSON
  permissions: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindManyBinanceSymbolOperatorsInput
  OR: [FilterFindManyBinanceSymbolInput!]
  AND: [FilterFindManyBinanceSymbolInput!]
}


input FilterFindManyBinanceSymbolOperatorsInput {
  _id: FilterFindManyBinanceSymbol_idOperatorsInput
}

input FilterFindManyBinanceSymbol_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyBinanceSymbolInput {
  _ID_ASC
  _ID_DESC
}

type BinanceProfile {
  user: MongoID
  lastBalanceHash: String
  lastBalanceData: JSON
  countedBalance: [BinanceProfileCountedBalance]!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type BinanceProfileCountedBalance {
  asset: String!
  quantity: Float!
  amount: Float!
  averagePurchasePrice: Float!
  realizedProfit: Float!
  lastTradeTimestamp: Float!
  _id: MongoID
}


input FilterFindOneBinanceProfileInput {
  user: MongoID
  lastBalanceHash: String
  lastBalanceData: JSON
  countedBalance: [FilterFindOneBinanceProfileCountedBalanceInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  
  _operators: FilterFindOneBinanceProfileOperatorsInput
  OR: [FilterFindOneBinanceProfileInput!]
  AND: [FilterFindOneBinanceProfileInput!]
}


input FilterFindOneBinanceProfileCountedBalanceInput {
  asset: String
  quantity: Float
  amount: Float
  averagePurchasePrice: Float
  realizedProfit: Float
  lastTradeTimestamp: Float
  _id: MongoID
}


input FilterFindOneBinanceProfileOperatorsInput {
  _id: FilterFindOneBinanceProfile_idOperatorsInput
}

input FilterFindOneBinanceProfile_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneBinanceProfileInput {
  _ID_ASC
  _ID_DESC
}

type Mutation {
  saveSymbolToDashboard(symbol: String!, watchlist: String!): String
  changeSymbolWatchlist(symbol: String!, watchlist: String, add: Boolean!): String
  changeWatchlistSettings(id: String!, hidden: Boolean, name: String): String
  createWatchlist(watchlist: String!): String
  removeSymbolFromDashboard(symbol: String!): String
  createChartGroup(name: String!): ChartGroup
  addChartToChartGroup(chartGroupId: String!, symbol: String!, order: Int!, range: String!): String!
  removeChartFromChartGroup(chartGroupId: String!, symbol: String!): String!
  removeChartGroup(chartGroupId: String!): String!
  saveNote(text: String!): String!
  setPriceAlert(symbol: String!, targetPrice: Float!): String
  removePriceAlert(id: String!): String
  setReminder(title: String!, text: String, timestamp: Float!): String
  removeReminder(id: String!): String
  cancelOrder(orderId: String!): String!

  
  setOrder(record: CreateOneOrderInput!): CreateOneOrderPayload
  setBinanceSellOrder(symbol: String!, priceType: String!, price: Float!, quantityType: String!, quantity: Float!, quoteOrderQty: Float!): String!
  setBinanceBuyOrder(symbol: String!, priceType: String!, price: Float!, quantityType: String!, quantity: Float!, quoteOrderQty: Float!): String!
  cancelBinanceOrder(symbol: String!, orderId: Int, origClientOrderId: String): [CancelBinanceOrder!]!
  refreshBinanceTrades: String!
}

type CreateOneOrderPayload {
  
  recordId: MongoID

  
  record: Order

  
  error: ErrorInterface
}


input CreateOneOrderInput {
  type: String!
  symbol: String!
  exchange: String!
  activateOnPrice: Float!
  sellOnPrice: Float!
  priceType: String!
  quantityType: String!
  quantity: Float!
  quoteOrderQty: Float!
  percent: Float!
  meta: JSON
}

type CancelBinanceOrder {
  symbol: String!
  origClientOrderId: String!
  orderId: Int!
  orderListId: Int!
  clientOrderId: String!
  price: Float!
  origQty: Float!
  executedQty: Float!
  cummulativeQuoteQty: Float!
  status: String!
  timeInForce: String!
  type: String!
  side: String!
}

type Subscription {
  lastPrice(symbol: String): LastPrice
  binanceLastPrice(symbol: String): BinanceLastPrice!
  binanceBalanceUpdate: BinanceBalanceUpdate
  binanceOrderUpdate: BinanceOrderUpdate
  binanceOcoOrderUpdate: BinanceOcoOrderUpdate
}

type LastPrice {
  symbol: String!
  price: Float!
  timestamp: Float!
  volume: Float!
}

type BinanceBalanceUpdate {
  asset: String!
  delta: Float!
  eventTime: Int!
  clearTime: Int!
}

type BinanceOrderUpdate {
  symbol: String!
  eventTime: Int!
  side: String!
  orderId: Int!
  transactionTime: Int!
}

type BinanceOcoOrderUpdate {
  symbol: String!
  eventTime: Int!
  transactionTime: Int!
}
