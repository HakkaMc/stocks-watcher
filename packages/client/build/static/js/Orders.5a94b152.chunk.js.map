{"version":3,"sources":["modules/Modal/Modal.tsx","modules/Orders/modules/BinanceRow.tsx","modules/Orders/modules/Row.tsx","modules/Orders/Orders.tsx","modules/Modal/styles.module.scss","modules/Orders/styles.module.scss"],"names":["Modal","open","children","className","styles","modal","contentWrapper","BinanceRow","symbol","side","price","origQty","executedQty","type","time","status","updateTime","stopPrice","orderId","useState","showCancelOrderInfoDialog","setShowCancelOrderInfoDialog","useLazyQuery","CANCEL_BINANCE_ORDER","cancelOrder","cancelOrderResponse","closeOrder","useCallback","variables","useEffect","loading","error","console","log","data","value","IconButton","onClick","modalId","onClose","header","JSON","stringify","Row","order","useMutation","CANCEL_ORDER","fetchPolicy","refetchQueries","query","GET_ORDERS","_id","detail","useMemo","quantity","fixedTrailingStop","quantityType","QuantityType","QuoteOrderQty","quoteOrderQty","Quantity","activateOnPrice","sellOnPrice","priceType","movingBuy","percent","createdAt","undefined","Orders","modalLoaderId","getBinanceOrdersResponse","useQuery","GET_BINANCE_ORDERS","notifyOnNetworkStatusChange","getOrdersResponse","binanceOrderUpdateResponse","useSubscription","BINANCE_ORDER_UPDATE_SUBSCRIPTION","binanceOcoOrderUpdateResponse","BINANCE_OCO_ORDER_UPDATE_SUBSCRIPTION","dispatchers","modalLoader","show","close","refresh","refetch","Box","paddingLeft","paddingRight","bgcolor","grey","content","tableWrapper","pr","pl","pt","pb","mb","Typography","variant","getBinanceOrders","map","key","getOrders","module","exports"],"mappings":"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","file":"static/js/Orders.5a94b152.chunk.js","sourcesContent":["import React from 'react'\nimport { Modal as ModalComponent } from '@material-ui/core'\n\nimport styles from './styles.module.scss'\n\nexport type Props = {\n  open: boolean\n  children: any\n}\n\nexport const Modal = ({ open, children }: Props) => {\n  return (\n    <ModalComponent open={open} className={styles.modal}>\n      <div className={styles.contentWrapper}>{children}</div>\n    </ModalComponent>\n  )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport { Box, IconButton, Paper } from '@material-ui/core'\nimport { BinanceOrder, CancelBinanceOrder } from '@sw/shared/src/graphql'\nimport { FormattedDate, FormattedTime } from 'react-intl'\nimport { useQuery, useLazyQuery } from '@apollo/client'\n\nimport { Modal } from '../../Modal/Modal'\nimport { CloseIcon } from '../../../utils/icons'\nimport { CANCEL_BINANCE_ORDER } from '../../../gqls'\nimport { ModalTemplate } from '../../../components'\n\ntype Props = BinanceOrder\n\nexport const BinanceRow = ({\n  symbol,\n  side,\n  price,\n  origQty,\n  executedQty,\n  type,\n  time,\n  status,\n  updateTime,\n  stopPrice,\n  orderId\n}: Props) => {\n  const [showCancelOrderInfoDialog, setShowCancelOrderInfoDialog] = useState(false)\n\n  const [cancelOrder, cancelOrderResponse] = useLazyQuery<{ cancelBinanceOrder: CancelBinanceOrder }>(\n    CANCEL_BINANCE_ORDER\n  )\n\n  const closeOrder = useCallback(() => {\n    cancelOrder({\n      variables: {\n        symbol,\n        orderId\n      }\n    })\n  }, [symbol, orderId, cancelOrder])\n\n  useEffect(() => {\n    if (!cancelOrderResponse.loading) {\n      if (cancelOrderResponse.error) {\n        console.log(cancelOrderResponse.error)\n        setShowCancelOrderInfoDialog(true)\n      } else {\n        console.log(cancelOrderResponse.data)\n      }\n    }\n  }, [cancelOrderResponse])\n\n  return (\n    <>\n      <tr>\n        <td>\n          <div>{symbol}</div>\n          <div>{status}</div>\n        </td>\n        <td>\n          <div>{side}</div>\n          <div>{type}</div>\n        </td>\n        <td>\n          <div>\n            {price} / {stopPrice}\n          </div>\n        </td>\n        <td>\n          <div>\n            {origQty} / {executedQty}\n          </div>\n        </td>\n        <td>\n          <div>\n            <FormattedDate value={time} /> <FormattedTime value={time} />\n          </div>\n          {time !== updateTime && (\n            <div>\n              <FormattedDate value={updateTime} /> <FormattedTime value={updateTime} />\n            </div>\n          )}\n        </td>\n        <td>\n          <IconButton onClick={closeOrder}>\n            <CloseIcon />\n          </IconButton>\n          {showCancelOrderInfoDialog && (\n            <Modal open={showCancelOrderInfoDialog}>\n              <ModalTemplate\n                modalId=\"\"\n                onClose={() => setShowCancelOrderInfoDialog(false)}\n                header={<span>Cancel order Error!</span>}\n              >\n                <textarea value={JSON.stringify(cancelOrderResponse.error)} />\n              </ModalTemplate>\n            </Modal>\n          )}\n        </td>\n      </tr>\n    </>\n  )\n}\n","import React, { useCallback, useMemo } from 'react'\nimport { IconButton } from '@material-ui/core'\nimport { Order } from '@sw/shared/src/graphql'\nimport { FormattedDate, FormattedTime } from 'react-intl'\nimport { useMutation } from '@apollo/client'\n\nimport { CloseIcon } from '../../../utils/icons'\nimport { CANCEL_ORDER, GET_ORDERS } from '../../../gqls'\nimport { ErrorModal } from '../../../components'\nimport { QuantityType } from '../../../binanceTypes'\n\ntype Props = Order\n\nconst fixedTrailingStop = (order: Order) => {\n  let quantity = null\n  switch (order.fixedTrailingStop?.quantityType) {\n    case QuantityType.QuoteOrderQty:\n      quantity = `${order.fixedTrailingStop.quoteOrderQty} $`\n      break\n    case QuantityType.Quantity:\n      quantity = order.fixedTrailingStop?.quantity\n      break\n    default:\n  }\n\n  return [\n    <>\n      <div>\n        {order.fixedTrailingStop?.activateOnPrice} $ / {order.fixedTrailingStop?.sellOnPrice} $\n      </div>\n      <div>{order.fixedTrailingStop?.priceType}</div>\n    </>,\n    <>\n      <div>{order.fixedTrailingStop?.quantityType}</div>\n      <div>{quantity}</div>\n    </>\n  ]\n}\n\nconst movingBuy = (order: Order) => {\n  let quantity = null\n  switch (order.movingBuy?.quantityType) {\n    case QuantityType.QuoteOrderQty:\n      quantity = `${order.movingBuy.quoteOrderQty} $`\n      break\n    case QuantityType.Quantity:\n      quantity = order.movingBuy?.quantity\n      break\n    default:\n  }\n\n  return [\n    <>\n      <div>\n        {order.movingBuy?.activateOnPrice} $ / {order.movingBuy?.percent} %\n      </div>\n      <div>{order.movingBuy?.priceType}</div>\n    </>,\n    <>\n      <div>{order.movingBuy?.quantityType}</div>\n      <div>{quantity}</div>\n    </>\n  ]\n}\n\nexport const Row = (order: Props) => {\n  const [cancelOrder, cancelOrderResponse] = useMutation<{ cancelOrder: string }>(CANCEL_ORDER, {\n    fetchPolicy: 'no-cache',\n    refetchQueries: [\n      {\n        query: GET_ORDERS\n      }\n    ]\n  })\n\n  const closeOrder = useCallback(() => {\n    cancelOrder({\n      refetchQueries: [\n        {\n          query: GET_ORDERS\n        }\n      ],\n      variables: {\n        orderId: order._id\n      }\n    })\n  }, [order])\n\n  const detail = useMemo(() => {\n    switch (order.type) {\n      case 'FIXED_TRAILING_STOP':\n        return fixedTrailingStop(order)\n\n      case 'MOVING_BUY':\n        return movingBuy(order)\n      default:\n    }\n    return [null, null]\n  }, [order])\n\n  return (\n    <>\n      <tr>\n        <td>{order.symbol}</td>\n        <td>\n          <div>{order.type}</div>\n        </td>\n        <td>{detail[0]}</td>\n        <td>{detail[1]}</td>\n        <td>\n          <FormattedDate value={order.createdAt} /> <FormattedTime value={order.createdAt} />\n        </td>\n        <td>\n          <IconButton onClick={closeOrder}>\n            <CloseIcon />\n          </IconButton>\n          <ErrorModal error={cancelOrderResponse.loading ? undefined : cancelOrderResponse.error} />\n        </td>\n      </tr>\n    </>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { Box, IconButton, Typography } from '@material-ui/core'\nimport { grey } from '@material-ui/core/colors'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { BinanceOcoOrderUpdate, BinanceOrder, BinanceOrderUpdate, Order } from '@sw/shared/src/graphql'\n\nimport { RefreshIcon } from '../../utils/icons'\nimport {\n  BINANCE_OCO_ORDER_UPDATE_SUBSCRIPTION,\n  BINANCE_ORDER_UPDATE_SUBSCRIPTION,\n  GET_BINANCE_ORDERS,\n  GET_ORDERS\n} from '../../gqls'\nimport { BinanceRow } from './modules/BinanceRow'\nimport { Row } from './modules/Row'\nimport { dispatchers } from '../../redux'\nimport styles from './styles.module.scss'\n\nexport const Orders = () => {\n  const modalLoaderId = 'BINANCE_ORDERS'\n\n  const getBinanceOrdersResponse = useQuery<{ getBinanceOrders: Array<BinanceOrder> }>(GET_BINANCE_ORDERS, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true\n  })\n\n  const getOrdersResponse = useQuery<{ getOrders: Array<Order> }>(GET_ORDERS, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true\n  })\n\n  const binanceOrderUpdateResponse = useSubscription<{ binanceOrderUpdate: BinanceOrderUpdate }>(\n    BINANCE_ORDER_UPDATE_SUBSCRIPTION\n  )\n\n  const binanceOcoOrderUpdateResponse = useSubscription<{ binanceOcoOrderUpdate: BinanceOcoOrderUpdate }>(\n    BINANCE_OCO_ORDER_UPDATE_SUBSCRIPTION\n  )\n\n  useEffect(() => {\n    if (getOrdersResponse.loading || getBinanceOrdersResponse.loading) {\n      dispatchers.modalLoader.show(modalLoaderId)\n    } else {\n      dispatchers.modalLoader.close(modalLoaderId)\n    }\n  }, [getOrdersResponse.loading, getBinanceOrdersResponse.loading])\n\n  const refresh = useCallback(() => {\n    getOrdersResponse.refetch()\n    getBinanceOrdersResponse.refetch()\n  }, [getOrdersResponse.refetch, getBinanceOrdersResponse.refetch])\n\n  useEffect(() => {\n    refresh()\n  }, [binanceOrderUpdateResponse.data])\n\n  useEffect(() => {\n    refresh()\n  }, [binanceOcoOrderUpdateResponse.data])\n\n  console.log(getBinanceOrdersResponse.error, getBinanceOrdersResponse.data)\n  console.log(getOrdersResponse.error, getOrdersResponse.data)\n  console.log('binanceOrderUpdateResponse: ', binanceOrderUpdateResponse)\n\n  return (\n    <>\n      <Box paddingLeft={4} paddingRight={4} bgcolor={grey[600]} className={styles.header}>\n        <Box className={styles.content}>\n          {(getOrdersResponse.loading || getBinanceOrdersResponse.loading) && <span>Pending</span>}\n          <IconButton onClick={refresh}>\n            <RefreshIcon />\n          </IconButton>\n        </Box>\n      </Box>\n\n      <Box className={styles.tableWrapper} pr={3} pl={3} pt={3} pb={3} mb={3}>\n        <Typography variant=\"h5\">Binance orders</Typography>\n        <Box className={styles.tableWrapper}>\n          <table>\n            <tbody>\n              {(getBinanceOrdersResponse?.data?.getBinanceOrders || []).map((order) => (\n                <BinanceRow {...order} key={order.orderId} />\n              ))}\n            </tbody>\n          </table>\n        </Box>\n      </Box>\n\n      <Box className={styles.tableWrapper} pr={3} pl={3} pt={3} pb={3} mb={3}>\n        <Typography variant=\"h5\">Orders</Typography>\n        <Box className={styles.tableWrapper}>\n          <table>\n            <tbody>\n              {(getOrdersResponse?.data?.getOrders || []).map((order) => (\n                <Row {...order} key={order._id} />\n              ))}\n            </tbody>\n          </table>\n        </Box>\n      </Box>\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"styles_modal__3IB6Q\",\"contentWrapper\":\"styles_contentWrapper__3T-0F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__zF6_5\",\"tableWrapper\":\"styles_tableWrapper__2_RRh\",\"equalCell\":\"styles_equalCell__1KBd5\",\"green\":\"styles_green__1_r2q\",\"red\":\"styles_red__2A6Ic\"};"],"sourceRoot":""}