{"version":3,"sources":["modules/BinancePortfolio/store.ts","modules/BinancePortfolio/useGetTrades.ts","modules/BinancePortfolio/modules/Row.tsx","modules/BinancePortfolio/modules/SummaryRows.tsx","modules/BinancePortfolio/BinancePortfolio.tsx","modules/BinancePortfolio/styles.module.scss"],"names":["actualPrices","boughtPrices","actualPricesSubject","BehaviorSubject","boughtPricesSubject","timeoutRef1","timeoutRef2","updateActualPrice","symbol","price","clearTimeout","setTimeout","next","updateBoughtPrice","query","a","Promise","resolve","apolloClient","GET_BINANCE_TRADES","fetchPolicy","variables","then","response","error","data","getBinanceTrades","exchangeInfoQuery","GET_BINANCE_EXCHANGE_INFORMATION","getBinanceExchangeInformation","Row","value","balance","showAll","index","amount","undefined","free","locked","Number","NaN","parseFloat","lastPriceResponse","useSubscription","BINANCE_LAST_PRICE_SUBSCRIPTION","asset","useState","loading","state","setState","exInfo","console","log","promises","forEach","quoteAsset","toUpperCase","find","item","push","all","responses","concat","sort","b","time","useGetTrades","getTrades","tradesResponse","useEffect","includes","showSellModal","useCallback","dispatchers","modal","open","name","ModalRoutes","BinanceSellOrder","props","lastPrice","useMemo","binanceLastPrice","ask","actualPrice","report","trades","rep","pricePerShare","realizedProfit","Array","isArray","tradeList","qty","isBuyer","commission","commissionAsset","unrealizedProfit","unrealizedPercentageProfit","href","target","rel","round","className","styles","equalCell","classNames","green","red","IconButton","onClick","digits","toString","toFixed","SummaryRows","deposit","boughtPrice","gain","percentageGain","overallGain","overallPercentageGain","compute","ret","Object","entries","subscription1","subscribe","subscription2","unsubscribe","useStore","BinancePortfolio","modalLoaderId","setShowAll","accountInformationResponse","useQuery","GET_BINANCE_ACCOUNT_INFORMATION","notifyOnNetworkStatusChange","balanceUpdateResponse","BINANCE_BALANCE_UPDATE_SUBSCRIPTION","modalLoader","show","close","refresh","refetch","balances","originalBalances","getBinanceAccountInformation","filter","localeCompare","Box","paddingLeft","paddingRight","bgcolor","grey","header","content","Checkbox","checked","color","onChange","tableWrapper","pr","pl","pt","pb","colSpan","map","i","module","exports"],"mappings":"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","file":"static/js/BinancePortfolio.8277b3cc.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { BehaviorSubject } from 'rxjs'\n\ntype State = {\n  actualPrice: number\n  boughtPrice: number\n  gain: number\n  percentageGain: number\n  overallGain: number\n  overallPercentageGain: number\n}\n\nconst actualPrices: Record<string, number> = {}\nconst boughtPrices: Record<string, number> = {}\n\nconst actualPricesSubject = new BehaviorSubject(actualPrices)\nconst boughtPricesSubject = new BehaviorSubject(boughtPrices)\n\nlet timeoutRef1: any = -1\nlet timeoutRef2: any = -1\n\nexport const updateActualPrice = (symbol: string, price: number) => {\n  actualPrices[symbol] = price\n  clearTimeout(timeoutRef1)\n  timeoutRef1 = setTimeout(() => {\n    actualPricesSubject.next(actualPrices)\n  }, 200)\n}\n\nexport const updateBoughtPrice = (symbol: string, price: number) => {\n  boughtPrices[symbol] = price\n  clearTimeout(timeoutRef2)\n  timeoutRef2 = setTimeout(() => {\n    boughtPricesSubject.next(boughtPrices)\n  }, 200)\n}\n\nexport const useStore = (): State & { deposit: number } => {\n  const deposit = 2833 + 4000\n\n  const [state, setState] = useState<State>({\n    actualPrice: 0,\n    boughtPrice: 0,\n    gain: 0,\n    percentageGain: 0,\n    overallGain: 0,\n    overallPercentageGain: 0\n  })\n\n  const compute = useCallback(() => {\n    const ret = {\n      actualPrice: 0,\n      boughtPrice: 0,\n      gain: 0,\n      percentageGain: 0,\n      overallGain: 0,\n      overallPercentageGain: 0\n    }\n\n    Object.entries(actualPrices).forEach(([symbol, value]) => {\n      ret.actualPrice += value\n    })\n    Object.entries(boughtPrices).forEach(([symbol, value]) => {\n      ret.boughtPrice += value\n    })\n\n    ret.gain = ret.actualPrice - ret.boughtPrice\n    ret.percentageGain = (100 / ret.boughtPrice) * ret.actualPrice - 100\n    ret.overallGain = ret.actualPrice - deposit\n    ret.overallPercentageGain = (100 / deposit) * ret.actualPrice - 100\n\n    setState(ret)\n  }, [setState])\n\n  useEffect(() => {\n    const subscription1 = actualPricesSubject.subscribe((value) => {\n      compute()\n    })\n\n    const subscription2 = boughtPricesSubject.subscribe((value) => {\n      compute()\n    })\n\n    return () => {\n      subscription1.unsubscribe()\n      subscription2.unsubscribe()\n    }\n  }, [compute])\n\n  return {\n    deposit,\n    ...state\n  }\n}\n","import React, { useCallback, useState } from 'react'\nimport { BinanceTrade, BinanceExchangeInformation } from '@sw/shared/src/graphql'\n\nimport { GET_BINANCE_EXCHANGE_INFORMATION, GET_BINANCE_TRADES } from '../../gqls'\nimport { apolloClient } from '../../api/apollo'\n\ntype Props = {\n  asset: string\n}\n\ntype State = {\n  loading: boolean\n  error: any\n  data: Array<BinanceTrade>\n}\n\ntype Query = {\n  data: Array<BinanceTrade>\n  error: any\n}\n\nconst query = async (symbol: string): Promise<Query> =>\n  new Promise((resolve) => {\n    apolloClient\n      .query({\n        query: GET_BINANCE_TRADES,\n        fetchPolicy: 'network-only',\n        variables: {\n          symbol\n        }\n      })\n      .then(\n        (response) => {\n          return resolve({\n            error: '',\n            data: response.data.getBinanceTrades\n          })\n        },\n        (error) => {\n          return resolve({\n            error,\n            data: []\n          })\n        }\n      )\n  })\n\nconst exchangeInfoQuery = async (): Promise<{ data: Array<BinanceExchangeInformation>; error: any }> =>\n  new Promise((resolve) => {\n    apolloClient\n      .query({\n        query: GET_BINANCE_EXCHANGE_INFORMATION\n      })\n      .then(\n        (response) => {\n          return resolve({\n            error: '',\n            data: response.data.getBinanceExchangeInformation\n          })\n        },\n        (error) => {\n          return resolve({\n            error,\n            data: []\n          })\n        }\n      )\n  })\n\nexport const useGetTrades = ({ asset }: Props): [() => void, State] => {\n  const [state, setState] = useState<State>({\n    loading: false,\n    error: undefined,\n    data: []\n  })\n\n  const getTrades = async () => {\n    setState({\n      data: [],\n      error: undefined,\n      loading: true\n    })\n\n    const exInfo = await exchangeInfoQuery()\n\n    if (exInfo.error) {\n      console.log(exInfo)\n      setState({\n        data: [],\n        loading: false,\n        error: exInfo.error\n      })\n    } else {\n      const promises: Array<Promise<Query>> = []\n      const suffixes = ['BUSD', 'USDT']\n      suffixes.forEach((quoteAsset) => {\n        const symbol = `${asset}${quoteAsset}`.toUpperCase()\n\n        if (exInfo.data.find((item) => item.symbol === symbol)) {\n          promises.push(query(symbol))\n        }\n      })\n\n      const responses = await Promise.all(promises)\n\n      const failedAll = !!responses.find((response) => !!response.error)\n\n      if (failedAll) {\n        console.log(responses)\n\n        setState({\n          data: [],\n          loading: false,\n          error: responses[0].error\n        })\n      } else {\n        let data: Array<BinanceTrade> = []\n        responses.forEach((response) => {\n          data = data.concat(response.data)\n        })\n\n        data.sort((a, b) => a.time - b.time)\n\n        setState({\n          data,\n          loading: false,\n          error: undefined\n        })\n      }\n    }\n  }\n\n  return [getTrades, { ...state }]\n}\n","import React, { useCallback, useEffect, useMemo } from 'react'\nimport classNames from 'classnames'\nimport { BinanceBalance, BinanceLastPrice, BinanceTrade } from '@sw/shared/src/graphql'\nimport { useSubscription } from '@apollo/client'\nimport { IconButton } from '@material-ui/core'\nimport { round } from '../../../utils/mix'\n\nimport { dispatchers } from '../../../redux'\nimport { CloseIcon } from '../../../utils/icons'\nimport { updateBoughtPrice, updateActualPrice } from '../store'\nimport { ModalRoutes } from '../../../constants'\nimport { useGetTrades } from '../useGetTrades'\nimport { BINANCE_LAST_PRICE_SUBSCRIPTION } from '../../../gqls'\n\nimport styles from '../styles.module.scss'\n\ntype Props = {\n  balance: BinanceBalance\n  showAll: boolean\n  index: number\n}\n\nconst f = (value: any): number => {\n  if (value === undefined || value === null) {\n    return Number.NaN\n  }\n\n  return parseFloat(value)\n}\n\nexport const Row = ({ balance, showAll, index }: Props) => {\n  const amount = f(balance.free + balance.locked)\n\n  const lastPriceResponse = useSubscription<{ binanceLastPrice: BinanceLastPrice }>(BINANCE_LAST_PRICE_SUBSCRIPTION, {\n    variables: {\n      symbol: `${balance.asset}BUSD`\n    }\n  })\n\n  const [getTrades, tradesResponse] = useGetTrades({ asset: balance.asset })\n\n  useEffect(() => {\n    updateBoughtPrice(balance.asset, ['USDT', 'BUSD'].includes(balance.asset.toUpperCase()) ? amount : 0)\n    updateActualPrice(balance.asset, ['USDT', 'BUSD'].includes(balance.asset.toUpperCase()) ? amount : 0)\n\n    if (!['USDT', 'BUSD'].includes(balance.asset.toUpperCase())) {\n      setTimeout(getTrades, index * 100)\n    }\n  }, [])\n\n  const showSellModal = useCallback(() => {\n    dispatchers.modal.open({\n      name: ModalRoutes.BinanceSellOrder,\n      props: { symbol: `${balance.asset}BUSD`, amount: balance.free }\n    })\n  }, [dispatchers])\n\n  const lastPrice = useMemo(() => {\n    if (['USDT', 'BUSD'].includes(balance.asset.toUpperCase())) {\n      return 1\n    }\n\n    if (lastPriceResponse.data?.binanceLastPrice) {\n      updateActualPrice(balance.asset, amount * lastPriceResponse.data?.binanceLastPrice.ask)\n      return lastPriceResponse.data?.binanceLastPrice.ask\n    }\n\n    return Number.NaN\n  }, [lastPriceResponse, updateActualPrice, amount])\n\n  const actualPrice = useMemo(() => {\n    if (['USDT', 'BUSD'].includes(balance.asset.toUpperCase())) {\n      return amount\n    }\n\n    if (lastPrice > 0) {\n      return lastPrice * amount\n    }\n\n    return Number.NaN\n  }, [lastPrice, amount])\n\n  const report = useMemo(() => {\n    const trades = tradesResponse.data\n\n    const rep = {\n      amount: 0,\n      pricePerShare: 0, // Average bougth price per share\n      realizedProfit: 0,\n      price: 0 // Amount bought in BUSD\n    }\n\n    if (['USDT', 'BUSD'].includes(balance.asset.toUpperCase())) {\n      rep.amount = amount\n      rep.pricePerShare = 1\n      rep.price = amount\n    }\n\n    if (Array.isArray(trades)) {\n      const tradeList = [...trades]\n\n      tradeList.sort((a, b) => a.time - b.time)\n\n      tradeList.forEach(({ price, qty, isBuyer, commission, commissionAsset, time }: BinanceTrade) => {\n        // if (isBuyer) {\n        //   rep.price += price * qty\n        //   rep.amount += (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty - commission : qty)\n        //   rep.pricePerShare = rep.price / rep.amount\n        // } else {\n        //   rep.realizedProfit += price * qty - rep.pricePerShare * qty\n        //   rep.amount -= (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty + commission : qty)\n        //   rep.price = rep.pricePerShare * rep.amount\n        // }\n\n        // if (isBuyer) {\n        //   rep.price += price * (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty + commission : qty+commission/price)\n        //   rep.amount += (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty - commission : qty-commission/price)\n        //   rep.pricePerShare = rep.price / rep.amount\n        // } else {\n        //   rep.realizedProfit += price * (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty - commission : qty-commission/price) - rep.pricePerShare * (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty - commission : qty-commission/price)\n        //   rep.amount -= (commissionAsset.toUpperCase() === balance.asset.toUpperCase() ? qty + commission : qty+commission/price)\n        //   rep.price = rep.pricePerShare * rep.amount\n        // }\n\n        if (isBuyer) {\n          if (['BUSD', 'USDT'].includes(commissionAsset.toUpperCase())) {\n            rep.realizedProfit -= commission\n            rep.amount += qty\n            rep.price += price * qty\n          } else if (commissionAsset.toUpperCase() === balance.asset.toUpperCase()) {\n            rep.amount += qty - commission\n            rep.price += price * (qty - commission)\n          }\n          // Commission is BNB\n          else {\n            // TODO -\n            rep.amount += qty\n            rep.price += price * qty\n          }\n\n          rep.pricePerShare = rep.price / rep.amount\n        } else {\n          if (['BUSD', 'USDT'].includes(commissionAsset.toUpperCase())) {\n            rep.realizedProfit -= commission\n            rep.amount -= qty\n            rep.realizedProfit += price * qty - rep.pricePerShare * qty\n          } else if (commissionAsset.toUpperCase() === balance.asset.toUpperCase()) {\n            rep.amount -= qty + commission\n            rep.realizedProfit += price * (qty - commission) - rep.pricePerShare * (qty - commission)\n          }\n          // Commission is BNB\n          else {\n            // TODO -\n            rep.amount -= qty\n            rep.realizedProfit += price * qty - rep.pricePerShare * qty\n          }\n\n          rep.price = rep.pricePerShare * rep.amount\n        }\n      })\n\n      // Counted and returned share-amount is different, so it's necessary to count the bought price using the\n      // share-amount return from binance.\n      rep.price = rep.pricePerShare * amount\n\n      // if(balance.asset === 'BNB'){\n      //   console.log('Amount: ', rep.amount)\n      // }\n\n      updateBoughtPrice(balance.asset, rep.price)\n    }\n\n    return rep\n  }, [tradesResponse.data])\n\n  const [unrealizedProfit, unrealizedPercentageProfit] = useMemo(() => {\n    if (!['USDT', 'BUSD'].includes(balance.asset.toUpperCase()) && report.price > 0) {\n      return [actualPrice - report.price, (100 / report.price) * actualPrice - 100]\n    }\n\n    return [0, 0]\n  }, [amount, actualPrice, report.price])\n\n  if (amount < 0.0001) return <></>\n\n  if (report.price < 1 && !showAll) return <></>\n\n  return (\n    <>\n      <tr key={balance.asset}>\n        <td>\n          <b>\n            <a\n              href={`https://www.tradingview.com/chart/?symbol=BINANCE:${balance.asset}BUSD`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {balance.asset}\n            </a>\n          </b>\n        </td>\n        <td>{round(amount, 4)}</td>\n        <td>{round(report.pricePerShare, 4)} $</td>\n        <td>{round(lastPrice, 4)} $</td>\n        <td>{round(report.price)} $</td>\n        <td>{round(actualPrice)} $</td>\n        <td className={styles.equalCell}>=</td>\n        <td\n          className={classNames({\n            [styles.green]: unrealizedProfit >= 0,\n            [styles.red]: unrealizedProfit < 0\n          })}\n        >\n          {round(unrealizedProfit)} $\n        </td>\n\n        <td\n          className={classNames({\n            [styles.green]: unrealizedProfit >= 0,\n            [styles.red]: unrealizedProfit < 0\n          })}\n        >\n          {round(unrealizedPercentageProfit)}%\n        </td>\n        <td\n          className={classNames({\n            [styles.green]: report.realizedProfit >= 0,\n            [styles.red]: report.realizedProfit < 0\n          })}\n        >\n          {round(report.realizedProfit)} $\n        </td>\n        <td>\n          {!['USDT', 'BUSD'].includes(balance.asset.toUpperCase()) && (\n            <IconButton onClick={showSellModal}>\n              <CloseIcon />\n            </IconButton>\n          )}\n        </td>\n      </tr>\n    </>\n  )\n}\n","import React from 'react'\nimport classNames from 'classnames'\nimport styles from '../styles.module.scss'\nimport { useStore } from '../store'\n\nconst round = (value: number | string | undefined, digits?: number) => {\n  if (value === undefined || value === null) {\n    return value\n  }\n\n  return parseFloat(value.toString()).toFixed(digits || 2)\n}\n\nexport const SummaryRows = () => {\n  const { deposit, boughtPrice, actualPrice, gain, overallGain, overallPercentageGain, percentageGain } = useStore()\n\n  return (\n    <>\n      <tr>\n        <td />\n        <td />\n        <td />\n        <td />\n        <td>\n          <b>{round(boughtPrice)} $</b>\n        </td>\n        <td>\n          <b>{round(actualPrice)} $</b>\n        </td>\n        <td>=</td>\n        <td\n          className={classNames({\n            [styles.green]: gain >= 0,\n            [styles.red]: gain < 0\n          })}\n        >\n          <b>{round(gain)} $</b>\n        </td>\n        <td\n          className={classNames({\n            [styles.green]: percentageGain >= 0,\n            [styles.red]: percentageGain < 0\n          })}\n        >\n          <b>{round(percentageGain)}%</b>\n        </td>\n        <td />\n        <td />\n      </tr>\n      <tr>\n        <td />\n        <td />\n        <td />\n        <td />\n        <td>\n          <b>{deposit} $</b>\n        </td>\n        <td>\n          <b>{round(actualPrice)} $</b>\n        </td>\n        <td>=</td>\n        <td\n          className={classNames({\n            [styles.green]: overallGain >= 0,\n            [styles.red]: overallGain < 0\n          })}\n        >\n          <b>{round(overallGain)} $</b>\n        </td>\n        <td\n          className={classNames({\n            [styles.green]: overallGain >= 0,\n            [styles.red]: overallGain < 0\n          })}\n        >\n          <b>{round(overallPercentageGain)}%</b>\n        </td>\n        <td />\n        <td />\n      </tr>\n    </>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Paper, Box, IconButton, Checkbox } from '@material-ui/core'\nimport { BinanceAccountInformation, BinanceBalanceUpdate, BinanceLastPrice } from '@sw/shared/src/graphql'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { grey } from '@material-ui/core/colors'\n\nimport {\n  BINANCE_BALANCE_UPDATE_SUBSCRIPTION,\n  BINANCE_LAST_PRICE_SUBSCRIPTION,\n  GET_BINANCE_ACCOUNT_INFORMATION,\n  GET_ORDERS\n} from '../../gqls'\nimport { CloseIcon, RefreshIcon } from '../../utils/icons'\nimport { ModalRoutes } from '../../constants'\nimport { dispatchers } from '../../redux'\nimport { Row } from './modules/Row'\nimport { SummaryRows } from './modules/SummaryRows'\n\nimport styles from './styles.module.scss'\n\nexport const BinancePortfolio = () => {\n  const modalLoaderId = 'BINANCE'\n  const [showAll, setShowAll] = useState(false)\n\n  const accountInformationResponse = useQuery<{ getBinanceAccountInformation: BinanceAccountInformation }>(\n    GET_BINANCE_ACCOUNT_INFORMATION,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true\n    }\n  )\n\n  const balanceUpdateResponse = useSubscription<{ binanceBalanceUpdate: BinanceBalanceUpdate }>(\n    BINANCE_BALANCE_UPDATE_SUBSCRIPTION\n  )\n\n  useEffect(() => {\n    if (accountInformationResponse.loading) {\n      dispatchers.modalLoader.show(modalLoaderId)\n    } else {\n      dispatchers.modalLoader.close(modalLoaderId)\n    }\n  }, [accountInformationResponse.loading])\n\n  const refresh = useCallback(() => {\n    accountInformationResponse.refetch()\n  }, [accountInformationResponse])\n\n  useEffect(() => {\n    refresh()\n    console.log(balanceUpdateResponse.data)\n  }, [balanceUpdateResponse.data])\n\n  const balances = useMemo(() => {\n    const originalBalances = accountInformationResponse.data?.getBinanceAccountInformation?.balances\n    if (Array.isArray(originalBalances)) {\n      return originalBalances\n        .filter((balance) => balance.locked + balance.free > 0)\n        .sort((a, b) => a.asset.localeCompare(b.asset))\n    }\n    return []\n  }, [accountInformationResponse.data?.getBinanceAccountInformation?.balances])\n\n  return (\n    <>\n      <Box paddingLeft={4} paddingRight={4} bgcolor={grey[600]} className={styles.header}>\n        <Box className={styles.content}>\n          <Checkbox checked={showAll} color=\"primary\" onChange={() => setShowAll(!showAll)} />\n          {accountInformationResponse.loading && <span>Pending</span>}\n          <IconButton onClick={refresh}>\n            <RefreshIcon />\n          </IconButton>\n        </Box>\n      </Box>\n\n      <Box className={styles.tableWrapper} pr={3} pl={3} pt={3} pb={3}>\n        <table>\n          <tbody>\n            <tr>\n              <th>Symbol</th>\n              <th>Množství</th>\n              <th colSpan={2}>Cena za akcii</th>\n              <th colSpan={2}>Hodnota</th>\n              <th className={styles.equalCell}>&nbsp;</th>\n              <th colSpan={2}>Nerealizovaný zisk/ztráta</th>\n              <th>Realizovaný zisk/ztráta</th>\n              <th>&nbsp;</th>\n            </tr>\n            <>\n              {balances.map((balance, i) => (\n                <Row key={`row_${balance.asset}`} balance={balance} showAll={showAll} index={i} />\n              ))}\n            </>\n            <SummaryRows />\n          </tbody>\n        </table>\n      </Box>\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__1hMg4\",\"tableWrapper\":\"styles_tableWrapper__3O0Ie\",\"equalCell\":\"styles_equalCell__1Jx_P\",\"green\":\"styles_green__2Xuuz\",\"red\":\"styles_red__1J-Jx\"};"],"sourceRoot":""}