{"version":3,"sources":["../../../node_modules/@material-ui/icons/esm/ViewStream.js","../../../node_modules/@material-ui/icons/esm/ViewModule.js","modules/ChartGroupView/modules/Chart/Chart.tsx","modules/ChartGroupView/ChartGroupView.tsx","modules/ChartGroupView/styles.module.scss","modules/ChartGroupView/modules/Chart/styles.module.scss"],"names":["createSvgIcon","React","d","tmpTto","Date","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","tmpTFrom","stockStartTime","stockEndTime","stockPreviousEndTime","midnight","aftermarketStopTime","premarketStartTime","LAYOUT","options","chart","renderTo","panning","enabled","type","mapNavigation","enableMouseWheelZoom","time","timezoneOffset","getTimezoneOffset","useUTC","plotOptions","series","lineWidth","data","dragDrop","draggableY","draggableX","softThreshold","xAxis","plotLines","value","getTime","color","dashStyle","width","zIndex","resize","endOnTick","startOnTick","yAxis","Chart","symbol","layout","range","removeChart","chartsCount","wheelEventInitialized","useState","setChart","useQuery","GET_PRICES","variables","timestampFrom","timestampTo","fetchPolicy","loading","error","lastPriceResponse","useSubscription","LAST_PRICE_SUBSCRIPTION","useEffect","container","addEventListener","event","showResetZoom","mousePercentage","target","getBoundingClientRect","clientX","delta","Math","sign","deltaY","xExtremes","getExtremes","yExtremes","xPercent","max","min","right","left","from","to","dataMin","dataMax","setExtremes","yBuffer","lastPrice","timestamp","floor","updated","rawData","Array","isArray","length","lastPoint","price","push","setData","reflow","setTitle","text","newData","getPrices","priceArray","map","priceObj","removeChartWrapper","useCallback","className","styles","chartWrapper","IconButton","onClick","Close","highcharts","HighchartsStock","callback","symbols","ChartGroupView","urlParams","useParams","VERTICAL","setLayout","chartGroupResponse","GET_CHART_GROUP","chartGroupId","useMutation","ADD_CHART_TO_CHART_GROUP","refetchQueries","query","addChartToChartGroup","REMOVE_CHART_FROM_CHART_GROUP","removeChartFromChartGroup","addChart","order","getChartGroup","charts","setLayoutWrapper","l","header","Box","m","box","ml","mr","name","SearchSymbolInput","save","ViewStream","GRID","ViewModule","classNames","body","vertical","grid","chartSettings","module","exports"],"mappings":"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","file":"static/js/ChartGroupView.ebb88b54.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4 18h17v-6H4v6zM4 5v6h17V5H4z\"\n}), 'ViewStream');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\"\n}), 'ViewModule');","import React, { useCallback, useEffect, useState } from 'react'\nimport { GetPrices, LastPrice } from '@sw/shared/src/graphql'\nimport { useSubscription, useMutation, useQuery } from '@apollo/client'\nimport HighchartsStock from 'highcharts/highstock'\nimport HighchartsReact from 'highcharts-react-official'\nimport { Close as CloseIcon } from '@material-ui/icons'\nimport { IconButton } from '@material-ui/core'\nimport { GET_CHART_GROUP, GET_PRICES, LAST_PRICE_SUBSCRIPTION, REMOVE_CHART_FROM_CHART_GROUP } from '../../../../gqls'\nimport styles from './styles.module.scss'\n\ntype Props = {\n  symbol: string\n  layout: any\n  range: string\n  removeChart: () => void\n  chartsCount: number\n}\n\nconst tmpTto = new Date()\ntmpTto.setDate(tmpTto.getDate() + 1)\ntmpTto.setHours(0)\ntmpTto.setMinutes(0)\ntmpTto.setSeconds(0)\ntmpTto.setMilliseconds(0)\n\nconst tmpTFrom = new Date(tmpTto)\ntmpTFrom.setDate(tmpTto.getDate() - 1)\ntmpTFrom.setHours(-4)\n\nconst stockStartTime = new Date()\nstockStartTime.setHours(15)\nstockStartTime.setMinutes(30)\nstockStartTime.setSeconds(0)\nstockStartTime.setMilliseconds(0)\n\nconst stockEndTime = new Date(stockStartTime)\nstockEndTime.setHours(22)\nstockEndTime.setMinutes(0)\n\nconst stockPreviousEndTime = new Date(stockEndTime)\nstockPreviousEndTime.setDate(stockPreviousEndTime.getDate() - 1)\n\nconst midnight = new Date()\nmidnight.setHours(0)\nmidnight.setMinutes(0)\nmidnight.setSeconds(0)\nmidnight.setMilliseconds(0)\n\nconst aftermarketStopTime = new Date(midnight)\naftermarketStopTime.setHours(2)\naftermarketStopTime.setMinutes(0)\n\nconst premarketStartTime = new Date(midnight)\npremarketStartTime.setHours(10)\npremarketStartTime.setMinutes(0)\n\nconst options = {\n  chart: {\n    // width: '100%'\n    renderTo: 'container',\n    // zoomType: 'xy',\n    // zoomKey: 'shift',\n    panning: {\n      enabled: true,\n      type: 'xy'\n    }\n    // panKey: 'ctrl',\n  },\n  mapNavigation: {\n    enabled: true,\n    enableMouseWheelZoom: true\n  },\n  // title: {\n  //   text: `${tmpTFrom.toLocaleString()} - ${tmpTto.toLocaleString()}`\n  // },\n  time: {\n    // timezone: 'Europe/Oslo'\n    timezoneOffset: tmpTFrom.getTimezoneOffset(),\n    useUTC: true\n  },\n  plotOptions: {\n    // pointStart:  tmpTFrom.getTime(),\n    // pointStart: {\n    //   x: tmpTFrom.getTime(),\n    //   y: 0\n    // }\n    // pointStart: Date.UTC(2020, 0, 1),\n    //     series: {\n    //         enableMouseTracking: false,\n    //         marker: {\n    //             enabled: false,\n    //         }\n    //     },\n    //     line: {\n    //         marker: {\n    //             states: {\n    //                 hover: {\n    //                     marker: {\n    //                         enabled: false\n    //                     }\n    //                 }\n    //             },\n    //             hover: {\n    //                 marker: {\n    //                     enabled: false\n    //                 }\n    //             }\n    //         }\n    //     }\n  },\n  series: [\n    {\n      lineWidth: 1,\n      type: 'spline',\n      data: [],\n      dragDrop: {\n        draggableY: false,\n        draggableX: false\n      },\n      softThreshold: false\n      // pointStart: [\n      //   tmpTFrom.getTime(),\n      //   0\n      // ]\n      // allowPointSelect: false,\n      // description: undefined,\n      // name: undefined,\n      // selected: false,\n      // showInLegend: false,\n      // showInNavigator: false,\n      // skipKeyboardNavigation: true,\n      // line: {\n      //     marker:{\n      //         enabled: false\n      //     }\n      // }\n    }\n    // {\n    //   data: [\n    //     {\n    //       x: new Date('2016-01-01 00:00:00').getTime(),\n    //       y: 0\n    //     }\n    //   ]\n    // },\n  ],\n  // navigator: {\n  //     enabled: false\n  // },\n  // title: {\n  //     text: undefined\n  // },\n  // legend: {\n  //     enabled: false\n  // },\n  // tooltip: {\n  //     enabled: false\n  // },\n  xAxis: {\n    //     visible: false\n    type: 'datetime',\n    // tickmarkPlacement: {\n    //     pointStart: tmpTFrom.getTime()\n    // },\n    // softMin: new Date('2016-01-01 00:00:00').getTime(),\n    // min: new Date('2016-01-01 00:00:00').getTime(),\n    plotLines: [\n      {\n        value: midnight.getTime(),\n        color: 'black',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      },\n      {\n        value: stockPreviousEndTime.getTime(),\n        color: 'red',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      },\n      {\n        value: aftermarketStopTime.getTime(),\n        color: 'orange',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      },\n      {\n        value: premarketStartTime.getTime(),\n        color: 'orange',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      },\n      {\n        value: stockStartTime.getTime(),\n        color: 'blue',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      },\n      {\n        value: stockEndTime.getTime(),\n        color: 'red',\n        dashStyle: 'shortdash',\n        width: 1,\n        zIndex: 1\n      }\n    ],\n    resize: {\n      enabled: true\n    },\n    endOnTick: false,\n    startOnTick: false\n  },\n  yAxis: {\n    // visible: false\n    // min: 0,\n    resize: {\n      enabled: true\n    },\n    endOnTick: false,\n    startOnTick: false\n  }\n}\n\n// let lastPriceCache = {\n//   timestamp: -1,\n//   price: -1\n// }\n\nexport const Chart = ({ symbol, layout, range = '1', removeChart, chartsCount }: Props) => {\n  let wheelEventInitialized = false\n\n  const [chart, setChart] = useState<any>()\n  // const [initDataSet, setInitDataSet] = useState(false)\n\n  const { data, loading, error } = useQuery<{ getPrices: GetPrices }>(GET_PRICES, {\n    variables: { symbol, range, timestampFrom: tmpTFrom.getTime(), timestampTo: tmpTto.getTime() },\n    fetchPolicy: 'network-only'\n  })\n  const lastPriceResponse = useSubscription<{\n    lastPrice: LastPrice\n  }>(LAST_PRICE_SUBSCRIPTION, { variables: { symbol } })\n\n  useEffect(() => {\n    if (chart) {\n      // chart.container.addEventListener('mousemove', (event: any) => {\n      //\n      // })\n\n      // console.log(chart.container.querySelector('svg').querySelector('rec'))\n\n      // const ref:any = setInterval(()=>{\n      // const rectangles = chart.container.querySelectorAll('.highcharts-plot-background')\n      //\n      // const svgObject = chart.container.querySelector('svg')\n      // const layer = svgObject.getElementsByTagName('rect')\n      // // const layer = svgObject.querySelector('rect')\n      //\n      // // console.log(svgObject)\n      //\n      // if (layer && layer.length) {\n      //   // const rectanglesArray = Array.from(rectangles)\n      //   console.log(rectangles.item(0))\n      //   rectangles.item(0).addEventListener(\n      //     'mousedown',\n      //     () => {\n      //       console.log('mouse down')\n      //     },\n      //     false\n      //   )\n      //\n      //   // clearInterval(ref)\n      //   console.log('Nasel sem: ', layer[1])\n      //\n      //   layer[1].addEventListener(\n      //     'mousedown',\n      //     (event: any) => {\n      //       console.log('mouse down')\n      //     },\n      //     false\n      //   )\n      //\n      //   // console.log(chart.container)\n      // }\n      // console.log('did mount ', symbol, wheelEventInitialized)\n\n      if (!wheelEventInitialized) {\n        wheelEventInitialized = true\n        // console.log('init zoom ', symbol)\n        chart.container.addEventListener('wheel', (event: any) => {\n          // layer[1].addEventListener('wheel', (event: any) => {\n          chart.showResetZoom()\n\n          const containerBounds = event.target.getBoundingClientRect()\n          const { width } = containerBounds\n          const mouseX = event.clientX\n          const mousePercentage = (100 / width) * mouseX\n\n          // console.log(event.target.getBoundingClientRect())\n\n          // console.log(event.clientX, event.clientY)\n\n          const delta = Math.sign(event.deltaY)\n\n          // console.log(delta)\n\n          const xExtremes = chart.xAxis[0].getExtremes()\n          const yExtremes = chart.yAxis[0].getExtremes()\n\n          const xPercent = ((xExtremes.max - xExtremes.min) / 100) * 20\n\n          // console.log(xExtremes.min, xExtremes.min)\n\n          if (delta < 0) {\n            const right = (xPercent / 100) * (100 - mousePercentage)\n            const left = (xPercent / 100) * mousePercentage\n\n            let from = xExtremes.min + left\n            let to = xExtremes.max - right\n\n            from = Math.max(from, xExtremes.dataMin - (xExtremes.dataMax - xExtremes.dataMin) / 2)\n            to = Math.min(to, xExtremes.dataMax + (xExtremes.dataMax - xExtremes.dataMin) / 2)\n\n            chart.xAxis[0].setExtremes(from, to)\n          } else {\n            let from = xExtremes.min - xPercent\n            let to = xExtremes.max + xPercent\n\n            from = Math.max(from, xExtremes.dataMin - (xExtremes.dataMax - xExtremes.dataMin) / 2)\n            to = Math.min(to, xExtremes.dataMax + (xExtremes.dataMax - xExtremes.dataMin) / 2)\n\n            chart.xAxis[0].setExtremes(from, to)\n\n            if (yExtremes) {\n              const yBuffer = ((yExtremes.dataMax - yExtremes.dataMin) / 100) * 10\n\n              chart.yAxis[0].setExtremes(yExtremes.dataMin - yBuffer, yExtremes.dataMax + yBuffer)\n            }\n\n            // chart.redraw(false)\n          }\n\n          // console.log('wheel: ', delta)\n        })\n      }\n      // }, 500)\n\n      // const layer = svgObject.querySelector('rec')\n      // console.log(svgObject)\n\n      // console.log(layer)\n\n      // const layer = chart.container.querySelector('svg').querySelector('rec')\n    }\n  }, [chart?.container])\n\n  // useEffect(() => {\n  //   const intervalRef = setInterval(() => {\n  //     if (chart && lastPriceCache.timestamp !== -1) {\n  //       chart.series[0].addPoint([lastPriceCache.timestamp, lastPriceCache.price])\n  //       lastPriceCache = {\n  //         timestamp: -1,\n  //         price: -1\n  //       }\n  //     }\n  //   }, 1000)\n  //\n  //   return () => {\n  //     clearInterval(intervalRef)\n  //   }\n  // }, [])\n\n  useEffect(() => {\n    if (chart && lastPriceResponse.data?.lastPrice) {\n      const timestamp = Math.floor(lastPriceResponse.data?.lastPrice.timestamp / 1000 / 60) * 60 * 1000\n\n      let updated = false\n\n      const rawData = chart.series[0]?.options?.data || []\n\n      if (Array.isArray(rawData) && rawData.length) {\n        const lastPoint = rawData[rawData.length - 1]\n        if (lastPoint[0] === timestamp) {\n          lastPoint[1] = lastPriceResponse.data?.lastPrice.price\n          updated = true\n        }\n      }\n\n      if (!updated) {\n        rawData.push([timestamp, lastPriceResponse.data?.lastPrice.price])\n        updated = true\n      }\n\n      if (updated) {\n        chart.series[0].setData([...rawData], true, false, true)\n      }\n    }\n  }, [chart, lastPriceResponse.data])\n\n  useEffect(() => {\n    if (chart) {\n      chart.reflow()\n    }\n  }, [chart, layout, chartsCount])\n\n  useEffect(() => {\n    if (chart) {\n      chart.setTitle({ text: symbol })\n    }\n  }, [chart, symbol])\n\n  useEffect(() => {\n    if (!loading && data && !error && chart) {\n      const newData = data.getPrices?.priceArray?.map((priceObj) => {\n        // console.log(new Date(priceObj?.timestamp || 0).toLocaleString())\n        return [priceObj?.timestamp, priceObj?.price]\n      })\n\n      if (newData) {\n        chart.series[0].setData(newData, true, false, true)\n        // chart.xAxis[0].setExtremes(newData[0][0], newData[newData.length-1][0])\n\n        // chart.series[0].setStartPoint({x: newData[0][0]})\n        // chart.series[0].update({\n        //   pointStart: {x:newData[0][0]}\n        // })\n        // chart.series[1].update({\n        //   pointStart: {x:newData[0][0]}\n        // })\n        // setInitDataSet(true)\n      }\n    }\n  }, [data, loading, error, chart])\n\n  const removeChartWrapper = useCallback(() => {\n    removeChart()\n  }, [removeChart])\n\n  return (\n    <div className={styles.container}>\n      {loading && <div>Loading chart...</div>}\n      {!error && !loading && data && (\n        <div className={styles.chartWrapper}>\n          <IconButton onClick={removeChartWrapper}>\n            <CloseIcon />\n          </IconButton>\n          <HighchartsReact highcharts={HighchartsStock} options={options} callback={setChart} />\n        </div>\n      )}\n    </div>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { Box, IconButton } from '@material-ui/core'\nimport classNames from 'classnames'\nimport { useSubscription, useMutation, useQuery, useLazyQuery } from '@apollo/client'\nimport { useParams } from 'react-router-dom'\nimport { ChartGroup, ChartGroupCharts } from '@sw/shared/src/graphql'\nimport { ViewModule as ViewModuleIcon, ViewStream as ViewStreamIcon } from '@material-ui/icons'\n\nimport styles from './styles.module.scss'\n\nimport { Chart } from './modules/Chart/Chart'\nimport { SearchSymbolInput } from '../../components/SearchSymbolInput/SearchSymbolInput'\nimport { ADD_CHART_TO_CHART_GROUP, GET_CHART_GROUP, REMOVE_CHART_FROM_CHART_GROUP } from '../../gqls'\n\nconst symbols = ['GME', 'NIO', 'BNGO', 'NVAX']\n\nenum LAYOUT {\n  VERTICAL,\n  GRID\n}\n\nexport const ChartGroupView = () => {\n  const urlParams = useParams<{ chartGroupId: string }>()\n  const [layout, setLayout] = useState<LAYOUT>(LAYOUT.VERTICAL)\n\n  const chartGroupResponse = useQuery<{ getChartGroup: ChartGroup }>(GET_CHART_GROUP, {\n    fetchPolicy: 'network-only',\n    variables: {\n      chartGroupId: urlParams.chartGroupId\n    }\n  })\n\n  const [addChartToChartGroup, addChartToChartGroupResponse] = useMutation(ADD_CHART_TO_CHART_GROUP, {\n    fetchPolicy: 'no-cache',\n    refetchQueries: [\n      {\n        query: GET_CHART_GROUP,\n        variables: {\n          chartGroupId: urlParams.chartGroupId\n        }\n      }\n    ]\n  })\n\n  const [removeChartFromChartGroup, removeChartFromChartGroupResponse] = useMutation(REMOVE_CHART_FROM_CHART_GROUP, {\n    fetchPolicy: 'no-cache',\n    refetchQueries: [\n      {\n        query: GET_CHART_GROUP,\n        variables: {\n          chartGroupId: urlParams.chartGroupId\n        }\n      }\n    ]\n  })\n\n  const addChart = useCallback(\n    (symbol: string) => {\n      if (symbol && urlParams.chartGroupId) {\n        addChartToChartGroup({\n          variables: {\n            chartGroupId: urlParams.chartGroupId,\n            symbol,\n            order: chartGroupResponse?.data?.getChartGroup?.charts.length || 0,\n            range: '1'\n          }\n        })\n      }\n    },\n    [addChartToChartGroup, urlParams]\n  )\n\n  const removeChart = useCallback(\n    (symbol: string) => () => {\n      removeChartFromChartGroup({\n        variables: {\n          chartGroupId: urlParams.chartGroupId,\n          symbol\n        }\n      })\n    },\n    [removeChartFromChartGroup]\n  )\n\n  const setLayoutWrapper = useCallback((l: LAYOUT) => () => setLayout(l), [])\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <Box m={0} className={styles.box}>\n          <Box ml={1} mr={3}>\n            {chartGroupResponse.data?.getChartGroup.name}\n          </Box>\n          <span>\n            <SearchSymbolInput save={addChart} />\n          </span>\n          <IconButton onClick={setLayoutWrapper(LAYOUT.VERTICAL)}>\n            <ViewStreamIcon color=\"primary\" />\n          </IconButton>\n          <IconButton onClick={setLayoutWrapper(LAYOUT.GRID)}>\n            <ViewModuleIcon color=\"primary\" />\n          </IconButton>\n        </Box>\n      </div>\n      <div\n        className={classNames(styles.body, {\n          [styles.vertical]: layout === LAYOUT.GRID,\n          [styles.grid]: layout === LAYOUT.GRID && symbols.length > 1\n        })}\n      >\n        {chartGroupResponse.data?.getChartGroup?.charts?.map((chartSettings) => (\n          <Chart\n            symbol={chartSettings?.symbol || ''}\n            key={chartSettings?.symbol}\n            layout={layout}\n            chartsCount={chartGroupResponse.data?.getChartGroup?.charts?.length || 0}\n            range={chartSettings?.range}\n            removeChart={removeChart(chartSettings?.symbol || '')}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1TDwt\",\"header\":\"styles_header__3B7l4\",\"box\":\"styles_box__2A0lW\",\"body\":\"styles_body__2vSkX\",\"grid\":\"styles_grid__298Jq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__13jtq\",\"chartWrapper\":\"styles_chartWrapper__6E823\"};"],"sourceRoot":""}